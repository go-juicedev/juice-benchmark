// Code generated by "juicecli impl -t UserRepository -o repository_impl.go"; DO NOT EDIT.

package benchmark

import (
	"context"
	"database/sql"
	"github.com/go-juicedev/juice"
)

type UserRepositoryImpl struct{}

func (u UserRepositoryImpl) Create(ctx context.Context, user *JuiceUser) (result0 sql.Result, result1 error) {
	manager := juice.ManagerFromContext(ctx)
	var iface UserRepository = u
	executor := juice.NewGenericManager[any](manager).Object(iface.Create)
	return executor.ExecContext(ctx, user)
}

func (u UserRepositoryImpl) BatchCreate(ctx context.Context, users []*JuiceUser) (result0 sql.Result, result1 error) {
	manager := juice.ManagerFromContext(ctx)
	var iface UserRepository = u
	executor := juice.NewGenericManager[any](manager).Object(iface.BatchCreate)
	return executor.ExecContext(ctx, users)
}

func (u UserRepositoryImpl) BatchCreateWithBatchSize(ctx context.Context, users []*JuiceUser) (result0 sql.Result, result1 error) {
	manager := juice.ManagerFromContext(ctx)
	var iface UserRepository = u
	executor := juice.NewGenericManager[any](manager).Object(iface.BatchCreateWithBatchSize)
	return executor.ExecContext(ctx, users)
}

func (u UserRepositoryImpl) QueryAll(ctx context.Context) (result0 []*JuiceUser, result1 error) {
	manager := juice.ManagerFromContext(ctx)
	var iface UserRepository = u
	rows, err := manager.Object(iface.QueryAll).QueryContext(ctx, nil)
	if err != nil {
		return nil, err
	}
	defer func() { _ = rows.Close() }()
	return juice.List2[JuiceUser](rows)
}

func (u UserRepositoryImpl) QueryWithLimit(ctx context.Context, limit int) (result0 []*JuiceUser, result1 error) {
	manager := juice.ManagerFromContext(ctx)
	var iface UserRepository = u
	rows, err := manager.Object(iface.QueryWithLimit).QueryContext(ctx, juice.H{"limit": limit})
	if err != nil {
		return nil, err
	}
	defer func() { _ = rows.Close() }()
	return juice.List2[JuiceUser](rows)
}

// NewUserRepository returns a new UserRepository.
func NewUserRepository() UserRepository {
	return &UserRepositoryImpl{}
}
